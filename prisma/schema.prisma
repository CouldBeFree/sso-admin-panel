// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id            String       @id @default(cuid())
  name          String
  email         String       @unique
  password      String
  role          Role         @relation(fields: [roleId], references: [id])
  roleId        String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  sessions      Session[]
  logs          Log[]
  clients       Client[]     // Relation to clients owned by this user
  clientUsers   ClientUser[] // Relation to clients this user has access to
}

// Role model for RBAC
model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  users       User[]
  permissions Permission[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Permission model for granular access control
model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  roles       Role[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Session model for authentication
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// Log model for activity tracking
model Log {
  id        String   @id @default(cuid())
  action    String
  details   String?
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

// Client model for SSO clients
model Client {
  id           String       @id @default(cuid())
  client_id    String       @unique
  client_secret String
  name         String
  description  String?
  scopes       String[]     // ['open_id', 'email', 'profile_with_doc']
  grant_types  String[]     // ['authorization_code', 'implicit', 'client_credentials', 'password', 'refresh_token', 'device_code', 'urn:ietf:params:oauth:grant-type:uma-ticket', 'urn:ietf:params:oauth:grant-type:uma-ticket']
  ownerId      String
  owner        User         @relation(fields: [ownerId], references: [id])
  users        ClientUser[] // Users assigned to this client
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

// ClientUser model for assigning users to clients with specific roles
model ClientUser {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  clientId  String
  client    Client   @relation(fields: [clientId], references: [id])
  role      String   // Role for this user in this client (e.g., 'editor', 'viewer', 'admin')
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, clientId]) // Each user can have only one role per client
}
